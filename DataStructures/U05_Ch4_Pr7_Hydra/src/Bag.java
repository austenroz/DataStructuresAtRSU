/*
 * Author: Austen Rozanski
 * Class: Data Structures
 * Title: Guessing Game
 * 
 * Date Started: January 29, 2015
 * Date Last Revised: January 31, 2015
 * 
 * 
 * Description of Problem: Write a program that allows the user to guess numbers randomly generated by the computer until they answer correctly.
 * 
 * Outline of the Program: 
 */

public class Bag<T> implements BagInterface<T>{
	
	private int currentSize = 0;
	Node<T> firstNode;
	
	/**@return  Returns the currentSize of the bag */
	@Override
	public int getCurrentSize() {
		return currentSize;
	}
	
	/**@return  Returns true if the bag is empty, false if not */
	@Override
	public boolean isEmpty() {
		if (currentSize == 0)
			return true;
		else
			return false;
	}

	/**@param newEntry  adds newEntry object to the bag using the Node objects.
	 * @return  Returns the currentSize of the bag */
	@Override
	public boolean add(T newEntry) {
		Node<T> newNode = new Node<T>(newEntry);
		if (currentSize == 0)
		{
			firstNode = newNode;
		}
		else
		{
			newNode.setNextNode(firstNode);
			firstNode = newNode;
		}
		currentSize++;
		return true;
	}

	/**@return  Returns the first item in the bag */
	@SuppressWarnings("unchecked")
	@Override
	public T remove() {
		if (currentSize > 0)
		{
			Node<T> oldFirstNode = firstNode;
			firstNode = firstNode.getNextNode();
			currentSize--;
			return oldFirstNode.getData();
		}
		else return null;
	}

	/**@param anEntry  removes the anEntry object from the bag if it exists within the bag.
	 * @return  Returns true if the object was removed successfully, false if not. */
	@SuppressWarnings("unchecked")
	@Override
	public boolean remove(T anEntry) {
		boolean foundEntry = false;
		Node<T> previousNode = null;
		Node<T> currentNode = firstNode;
		for (int i = 0; i < currentSize && !foundEntry; i++)
		{
			if (currentNode.getData() == anEntry)
			{
				if (i == 0) //First Entry
				{
					firstNode = firstNode.getNextNode();
				}
				else
				{
					previousNode.setNextNode(currentNode.getNextNode());
				}
				foundEntry = true;
				currentSize--;
			}
			else
			{
				previousNode = currentNode;
				currentNode = currentNode.getNextNode();
			}
		}
		return foundEntry;
	}

	/**Clear all items out of the bag */
	@Override
	public void clear() {
		currentSize = 0;
		firstNode = new Node<T>(null);
	}

	/**@param anEntry  Checks to see if anEntry exists within the bag and how many exist.
	 * @return  returns number of times anEntry was found within the bag. */
	@SuppressWarnings("unchecked")
	@Override
	public int getFrequencyOf(T anEntry) {
		int frequency = 0;
		Node<T> currentNode = firstNode;
		for (int i = 0; i < currentSize; i++)
		{
			if (currentNode.getData() == anEntry)
			{
				frequency++;
			}
			else
			{
				currentNode = currentNode.getNextNode();
			}
		}
		return frequency;
	}

	/**@param anEntry  Checks to see if anEntry exists within the bag
	 * @return  Returns true if the object was found, false if not. */
	@SuppressWarnings("unchecked")
	@Override
	public boolean contains(T anEntry) {
		boolean foundEntry = false;
		Node<T> currentNode = firstNode;
		for (int i = 0; i < currentSize; i++)
		{
			if (currentNode.getData() == anEntry)
			{
				foundEntry = true;
			}
			else
			{
				currentNode = currentNode.getNextNode();
			}
		}
		return foundEntry;
	}

	//Unused
	@Override
	public T[] toArray() {
		return null;
	}
	
}
